class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
        
class LinkedList:
    def __init__(self):
        self.head = None
    
    def InsertEnd(self,newNode):
        if self.head is None:
            self.head = newNode            
        else:
            lastNode=self.head
            while True:
                if lastNode.next is None:
                    break
                lastNode = lastNode.next
            lastNode.next = newNode
                          
    def Printlist(self):
        if self.head is None:
            print("List is empty")
            return
        currentNode = self.head
        while True:            
            if currentNode is None:                
                break
            print(currentNode.data)
            currentNode = currentNode.next
    
    def isListEmpty(self):
        if self.head is None:
            return True
        else:
            return False
            
    def InsertHead(self,newNode):
        current = self.head
        self.head= newNode
        newNode.next = current
        del current
    
    def listLength(self):
        currentNode = self.head
        length = 0
        while currentNode is not None:
            length += 1
            currentNode = currentNode.next
        return length
        
    def InsertAt(self,newNode,pos):
        currentNode = self.head
        currentPosition = 0
        if pos < 0 or pos > self.listLength():
            print("invalid")
            return
        if pos == 0:
            self.InsertHead(newNode)
            return
        while True:              
            if currentPosition == pos:
                previousNode.next = newNode
                newNode.next = currentNode
                break
            previousNode = currentNode
            currentNode = currentNode.next
            currentPosition += 1
            
    def deleteEnd(self):
        if self.isListEmpty()is False:
            
            if self.head.next is None:
                self.deleteHead()
                return
            current = self.head
            previous = None
            while current.next is not None:
                previous = current
                current = current.next
            del current
            previous.next = None
        else:
            print("List is empty")
    
    def deleteHead(self):
        if self.isListEmpty()is False:
            temp = self.head
            self.head = temp.next
            del temp
        else:
            print("List is empty")
        
    def deleteAt(self,pos):
        current = self.head
        previous = None
        curPos = 0
        if pos < 0 or pos >=self.listLength():
            print("invalid")
            return
        if self.isListEmpty()is False:
            while True:
                if curPos == pos:
                    previous.next = current.next
                    del current
                    break
                previous = current
                current = current.next
                curPos += 1
        
        
            
linkedList = LinkedList()           
firstNode = Node("10") 
linkedList.InsertEnd(firstNode)
secondNode = Node("20")
linkedList.InsertEnd(secondNode)
thirdNode = Node("30")
linkedList.InsertHead(thirdNode)
fourthNode = Node("40")
linkedList.InsertAt(fourthNode,2)
linkedList.deleteAt(2)
linkedList.Printlist()       
